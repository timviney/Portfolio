name: Build and Deploy to AWS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: "aws"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Sync S3 bucket with proper GZ headers
        run: |
          # Sync all non-gzipped files first
          aws s3 sync build/ s3://timviney.com \
            --exclude "*.gz" \
            --delete \
            --cache-control "no-store"
          
          # Upload JS GZ files with proper headers
          aws s3 cp build/ s3://timviney.com \
            --recursive \
            --exclude "*" \
            --include "*.js.gz" \
            --content-type "application/javascript" \
            --content-encoding "gzip" \
            --cache-control "no-store"
          
          # Upload WASM GZ files with proper headers
          aws s3 cp build/ s3://timviney.com \
            --recursive \
            --exclude "*" \
            --include "*.wasm.gz" \
            --content-type "application/wasm" \
            --content-encoding "gzip" \
            --cache-control "no-store"
          
          # Upload DATA GZ files with proper headers
          aws s3 cp build/ s3://timviney.com \
            --recursive \
            --exclude "*" \
            --include "*.data.gz" \
            --content-type "application/octet-stream" \
            --content-encoding "gzip" \
            --cache-control "no-store"

      - name: Create CloudFront invalidation
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_ID }} \
            --paths "/*"
